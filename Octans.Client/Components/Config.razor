@page "/config"
@using Octans.Client.Config
@inject ConfigViewModel ViewModel
@rendermode InteractiveServer

<PageTitle>Octans - Configuration</PageTitle>

<div class="config-container">
    <div class="header">
        <h1>Configuration</h1>
        <p>Manage Octans settings and preferences</p>
    </div>

    <div class="config-form">
        @if (_saveSuccess)
        {
            <div class="alert alert-success" role="alert">
                Configuration saved successfully!
            </div>
        }
        
        @if (_saveError)
        {
            <div class="alert alert-danger" role="alert">
                Error saving configuration: @_errorMessage
            </div>
        }

        <div class="config-section">
            <h2>Server Settings</h2>
            
            <div class="form-group">
                <label for="apiUrl">API URL</label>
                <input id="apiUrl" class="form-control" type="text" @bind="ViewModel.ApiUrl" />
                <small class="form-text text-muted">The URL of the Octans API server</small>
            </div>
            
            <div class="form-group">
                <label for="appRoot">Application Root Directory</label>
                <input id="appRoot" class="form-control" type="text" @bind="ViewModel.AppRoot" />
                <small class="form-text text-muted">The root directory for Octans data storage</small>
            </div>
        </div>
        
        <div class="config-section">
            <h2>Logging</h2>
            
            <div class="form-group">
                <label for="logLevel">Default Log Level</label>
                <select id="logLevel" class="form-control" @bind="ViewModel.LogLevel">
                    @foreach (var level in ViewModel.AvailableLogLevels)
                    {
                        <option value="@level">@level</option>
                    }
                </select>
                <small class="form-text text-muted">Controls the verbosity of logs generated by Octans</small>
            </div>
            
            <div class="form-group">
                <label for="aspNetLogLevel">ASP.NET Core Log Level</label>
                <select id="aspNetLogLevel" class="form-control" @bind="ViewModel.AspNetCoreLogLevel">
                    @foreach (var level in ViewModel.AvailableLogLevels)
                    {
                        <option value="@level">@level</option>
                    }
                </select>
                <small class="form-text text-muted">Controls the verbosity of logs generated by ASP.NET Core</small>
            </div>
        </div>
        
        <div class="config-action">
            <button class="btn btn-primary" @onclick="SaveConfig" disabled="@_isSaving">
                @if (_isSaving)
                {
                    <span>Saving...</span>
                }
                else
                {
                    <span>Save Settings</span>
                }
            </button>
        </div>
    </div>

    <div class="config-note">
        <p>
            <strong>Note:</strong> Some changes may require a restart of the application to take effect.
        </p>
    </div>
</div>

@code {
    private bool _isSaving;
    private bool _saveSuccess;
    private bool _saveError;
    private string _errorMessage = string.Empty;

    private async Task SaveConfig()
    {
        _isSaving = true;
        _saveSuccess = false;
        _saveError = false;
        
        try
        {
            await ViewModel.SaveConfiguration();
            _saveSuccess = true;
            
            // Auto-hide success message after 3 seconds
            await Task.Delay(3000);
            _saveSuccess = false;
        }
        catch (Exception ex)
        {
            _saveError = true;
            _errorMessage = ex.Message;
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }
}
@using Octans.Core.Infrastructure
@inject ILocalFileImportViewmodel Viewmodel
@inject StorageService StorageService
@inject IDialogService DialogService

<div class="file-input-wrapper">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" @bind-Files="Viewmodel.LocalFiles">
        <ActivatorContent>
            <MudButton
                Variant="Variant.Filled"
                Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.CloudUpload">
                Choose files
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>
</div>

@if (Viewmodel.LocalFiles.Count > 0)
{
    <div class="file-list">
        <h5>Selected Files (@Viewmodel.LocalFiles.Count):</h5>
        @foreach (var file in Viewmodel.LocalFiles)
        {
            <div class="file-item">
                <span>@file.Name</span>
                <span>@StorageService.FormatFileSize(file.Size)</span>
            </div>
        }
    </div>
    
    <div class="import-actions">
        <MudButton
            Variant="Variant.Outlined"
            Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Tag"
            OnClick="@OpenTagChooser"
            Disabled="@(Viewmodel.LocalFiles.Count == 0)">
            Add Tags
        </MudButton>
    </div>
}

<MudButton
    Class="send-button"
    OnClick="@Viewmodel.SendLocalFilesToServer"
    Disabled="@(Viewmodel.LocalFiles.Count == 0)">
    Import
</MudButton>

@if (Viewmodel.Result is not null)
{
    <section class="results">
        <p>@Viewmodel.Result.Results.Count(s => s.Ok) OK</p>

        @foreach (var result in Viewmodel.Result.Results.Where(s => !s.Ok))
        {
            <p>@result.Message</p>
        }
    </section>
}

@code {
    private TagChooser.TagChooserResult? TagChooserResult { get; set; }

    private async Task OpenTagChooser()
    {
        var parameters = new DialogParameters<TagChooserDialog>
        {
            { x => x.Paths, Viewmodel.LocalFiles.Select(f => f.Name) }
        };

        var options = new DialogOptions 
        { 
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            CloseButton = true
        };

        var dialog = await DialogService.ShowAsync<TagChooserDialog>("Add Tags", parameters, options);
        var result = await dialog.Result;

        if (result is {Canceled: false, Data: TagChooser.TagChooserResult tagResult})
        {
            TagChooserResult = tagResult;
            // TODO: Store tag result for use during import
        }
    }
}

<style>
    .import-actions {
        margin-top: 1rem;
        display: flex;
        gap: 0.5rem;
    }
</style>
@page "/Imports"
@using Octans.Core.Infrastructure
@using Octans.Core.Importing
@using MudBlazor
@inject ImportsViewmodel Viewmodel
@inject StorageService StorageService

<div class="imports-container">
    <h3>Import Content</h3>

    <div class="import-tabs">
        <MudTabs>
            <MudTabPanel Text="Files">
                <div class="upload-section">
                    <div class="file-input-wrapper">
                        <MudFileUpload T="IReadOnlyList<IBrowserFile>" @bind-Files="LocalFiles">
                            <ActivatorContent>
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload">
                                    Choose files
                                </MudButton>
                            </ActivatorContent>
                        </MudFileUpload>
                    </div>

                    @if (LocalFiles.Count > 0)
                    {
                        <div class="file-list">
                            <h5>Selected Files (@LocalFiles.Count):</h5>
                            @foreach (var file in LocalFiles)
                            {
                                <div class="file-item">
                                    <span>@file.Name</span>
                                    <span>@FormatFileSize(file.Size)</span>
                                </div>
                            }
                        </div>
                    }

                    <MudButton Class="send-button" OnClick="@SendFiles" Disabled="@(LocalFiles.Count == 0)">
                        Import
                    </MudButton>
                </div>
            </MudTabPanel>
            <MudTabPanel Text="URL">
                <div class="url-section">
                    <div class="input-group">
                        <textarea
                            @bind="_urlInput"
                            placeholder="Enter URLs (one per line)"
                            rows="5"
                            class="url-input">
                </textarea>
                    </div>

                    <div class="import-options">
                        <label class="option">
                            <input type="checkbox" @bind="_allowReimportDeleted"/>
                            Allow reimport of deleted items
                        </label>
                    </div>

                    <button class="send-button" @onclick="@SendUrls" disabled="@(string.IsNullOrWhiteSpace(_urlInput))">
                        Import
                    </button>
                </div>
            </MudTabPanel>
            <MudTabPanel Text="Post">
                <p>Sorry, this isn't implemented yet.</p>
            </MudTabPanel>
            <MudTabPanel Text="Gallery">
                <p>Sorry, this isn't implemented yet.</p>
            </MudTabPanel>
            <MudTabPanel Text="Watchable">
                <p>Sorry, this isn't implemented yet.</p>
            </MudTabPanel>

        </MudTabs>
    </div>
</div>

@code {
    private IReadOnlyList<IBrowserFile> LocalFiles { get; set; } = [];
    private string _urlInput = string.Empty;
    private bool _allowReimportDeleted;

    private async Task SendFiles()
    {
        await Viewmodel.SendLocalFilesToServer(LocalFiles);
        LocalFiles = new List<IBrowserFile>();
    }

    private async Task SendUrls()
    {
        if (string.IsNullOrWhiteSpace(_urlInput))
            return;

        var urls = _urlInput
            .Split(['\r', '\n'], StringSplitOptions.RemoveEmptyEntries)
            .Select(url => url.Trim())
            .Where(url => !string.IsNullOrWhiteSpace(url))
            .ToList();

        if (urls.Count > 0)
        {
            await Viewmodel.SendUrlsToServer(urls, ImportType.RawUrl, _allowReimportDeleted);
            _urlInput = string.Empty;
        }
    }

    private string FormatFileSize(long bytes)
    {
        return StorageService.FormatFileSize(bytes);
    }
}

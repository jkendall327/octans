@using Octans.Client.Components.Gallery
<article class="tag-chooser">
    <section class="paths">
        <MudDataGrid
            T="PathItem"
            MultiSelection="true"
            SelectedItems="@SelectedPaths"
            Items="@(Paths.Select((s, i) => new PathItem
                   {
                       Path = s,
                       Index = i
                   }))">
            <Columns>
                <PropertyColumn Property="@(x => x.Index)" Title="#"/>
                <PropertyColumn Property="@(x => x.Path)"/>
                <TemplateColumn Title="Metadata"/>
            </Columns>
        </MudDataGrid>
    </section>
    <section class="tag-selection">
        <div class="tag-inputs">
            <div class="tags-for-all">
                <ManualTagInput 
                    Title="tags for all"
                    Scope="TagScope.AllPaths"
                    Assignments="@TagAssignments"
                    TagsChanged="OnTagsChanged"
                />
            </div>
            <div class="tags-for-selected">
                <ManualTagInput 
                    Title="tags for selected items"
                    Scope="TagScope.SelectedPaths"
                    Assignments="@TagAssignments"
                    SelectedPaths="@(SelectedPaths.Select(p => p.Path))"
                    TagsChanged="OnTagsChanged"
                    />
            </div>
        </div>
        <MiscTagOptionsComponent @bind-Options="MiscOptions" />
    </section>
    <footer class="tag-chooser-actions">
        <MudButton 
            Variant="Variant.Outlined" 
            OnClick="@OnCancelClick"
            Color="Color.Secondary">
            Cancel
        </MudButton>
        <MudButton 
            Variant="Variant.Filled" 
            OnClick="@OnConfirmClick"
            Color="Color.Primary">
            OK
        </MudButton>
    </footer>
</article>

@code {
    [Parameter, EditorRequired] public IEnumerable<string> Paths { get; set; } = [];
    [Parameter, EditorRequired] public EventCallback<TagChooserResult> OnConfirm { get; set; }
    [Parameter, EditorRequired] public EventCallback OnCancel { get; set; }

    public HashSet<PathItem> SelectedPaths { get; set; } = [];
    public TagAssignmentCollection TagAssignments { get; set; } = new();
    private MiscTagOptionsData MiscOptions { get; set; } = new();

    private void OnTagsChanged()
    {
        // Tags have been updated - could trigger UI refresh if needed
        StateHasChanged();
    }

    private async Task OnConfirmClick()
    {
        var result = new TagChooserResult
        {
            ManualTagAssignments = TagAssignments,
            MiscTagOptions = MiscOptions,
            AllPaths = Paths.ToList()
        };
        
        await OnConfirm.InvokeAsync(result);
    }

    private async Task OnCancelClick()
    {
        await OnCancel.InvokeAsync();
    }

    public sealed class PathItem
    {
        public required string Path { get; set; }
        public required int Index { get; set; }
    }

    public sealed class TagsForPath
    {
        public required string Path { get; set; }
        public List<TagViewer.Tag> Tags { get; set; } = [];
    }

    public sealed class TagChooserResult
    {
        public required TagAssignmentCollection ManualTagAssignments { get; set; }
        public required MiscTagOptionsData MiscTagOptions { get; set; }
        public required List<string> AllPaths { get; set; }
        
        public List<TagsForPath> GenerateTagsForPaths()
        {
            var result = new List<TagsForPath>();
            
            foreach (var path in AllPaths)
            {
                var tags = new List<TagViewer.Tag>();
                
                // Add manual tag assignments
                tags.AddRange(ManualTagAssignments.GetTagsForPath(path, AllPaths));
                
                // Add misc tags based on file path
                tags.AddRange(GenerateMiscTags(path));
                
                result.Add(new()
                {
                    Path = path,
                    Tags = tags
                });
            }
            
            return result;
        }
        
        private List<TagViewer.Tag> GenerateMiscTags(string filePath)
        {
            var tags = new List<TagViewer.Tag>();
            var pathParts = filePath.Split('/', StringSplitOptions.RemoveEmptyEntries);
            var fileName = Path.GetFileNameWithoutExtension(filePath);
            
            foreach (var option in MiscTagOptions.Options.Where(o => o.IsEnabled))
            {
                if (string.IsNullOrWhiteSpace(option.Namespace)) continue;
                
                var tagValue = option.Purpose switch
                {
                    MiscTagPurpose.Filename => fileName,
                    MiscTagPurpose.LastDirectory => pathParts.Length > 1 ? pathParts[^2] : null,
                    MiscTagPurpose.SecondLastDirectory => pathParts.Length > 2 ? pathParts[^3] : null,
                    MiscTagPurpose.ThirdLastDirectory => pathParts.Length > 3 ? pathParts[^4] : null,
                    MiscTagPurpose.FirstDirectory => pathParts.Length > 1 ? pathParts[0] : null,
                    MiscTagPurpose.SecondDirectory => pathParts.Length > 2 ? pathParts[1] : null,
                    MiscTagPurpose.ThirdDirectory => pathParts.Length > 3 ? pathParts[2] : null,
                    _ => null
                };
                
                if (!string.IsNullOrWhiteSpace(tagValue))
                {
                    tags.Add(new(option.Namespace, tagValue, 1));
                }
            }
            
            return tags;
        }
    }

}

<style>
    article {
        display: flex;
        flex-direction: column;
        border: 1px solid;
    }

    .tag-selection {
        display: flex;
        flex-direction: row;
    }

    .tag-inputs {
        display: flex;
        flex-direction: row;
        flex: 1 1 0;
    }

    .tag-chooser-actions {
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
        padding: 1rem;
        border-top: 1px solid var(--border-color);
        background-color: var(--background-color);
    }

</style>
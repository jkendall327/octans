@page "/"
@using Octans.Server.Services
@inject StatsService Stats
@inject ILogger<Home> Logger

<PageTitle>Octans - Home</PageTitle>

<div class="home-container">
    <div class="logo-container">
        <img src="images/octans-logo.svg" alt="Octans Logo" class="logo" />
    </div>

    <div class="welcome-section">
        <h1>Welcome to Octans</h1>
        <p class="subtitle">Your personal media management system</p>
        @if (!_statsLoaded)
        {
            <p class="subtitle">(Loading stats...)</p>
        }
    </div>

    <div class="stats-container">
        <div class="stat-card">
            <div class="stat-value">@(_totalImages)</div>
            <div class="stat-label">Total Images</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">@(_inboxCount)</div>
            <div class="stat-label">In Inbox</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">@(_tagCount)</div>
            <div class="stat-label">Unique Tags</div>
        </div>
        <div class="stat-card">
            <div class="stat-value">@(_storageUsed)</div>
            <div class="stat-label">Storage Used</div>
        </div>
    </div>

    <div class="navigation-cards">
        <a href="/gallery" class="nav-card">
            <div class="nav-card-icon">📷</div>
            <div class="nav-card-title">Gallery</div>
            <div class="nav-card-description">Browse and search your media collection</div>
        </a>
        <a href="/imports" class="nav-card">
            <div class="nav-card-icon">📥</div>
            <div class="nav-card-title">Imports</div>
            <div class="nav-card-description">Add new content to your collection</div>
        </a>
    </div>
</div>


@code {
    private int _totalImages;
    private int _inboxCount;
    private int _tagCount;
    private string _storageUsed = "0 B";
    private bool _statsLoaded;

    protected override async Task OnInitializedAsync()
    {
        if (RendererInfo.IsInteractive)
        {
            await LoadStats();
        }
    }

    private async Task LoadStats()
    {
        try
        {
            var response = await Stats.GetHomeStats();
            
            _totalImages = response.TotalImages;
            _inboxCount = response.InboxCount;
            _tagCount = response.TagCount;
            _storageUsed = response.StorageUsed;

            _statsLoaded = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading stats for homepage");
            
            // Use fallback values
            _totalImages = 0;
            _inboxCount = 0;
            _tagCount = 0;
            _storageUsed = "0 GB";
            _statsLoaded = true;
        }
    }
}

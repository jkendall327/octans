<div class="image-viewer" @onkeydown="@OnKeyDown">
    <section class="toolbar">
        <MudButton
            OnClick="@(OnClose)"
            Size="Size.Small"
            Class="mr-n3 mb-1"
            Color="Color.Error">
            Close
        </MudButton>
        <MudButton
            OnClick="@(PreviousAsync)"
            Disabled="@(CurrentImage is null)"
            Size="Size.Small"
            Class="mr-n3 mb-1"
            Color="Color.Default">
            Previous
        </MudButton>
        <MudButton
            OnClick="@(NextAsync)"
            Disabled="@(CurrentImage is null)"
            Size="Size.Small"
            Class="mr-n3 mb-1"
            Color="Color.Default">
            Next
        </MudButton>
    </section>
        
    <section class="image-display">
        @if (CurrentImage is null)
        {
            <p>Loading...</p>
        }
        else
        {
            <img
                src="@CurrentImage"
                alt="Gallery image"
                loading="lazy"
                decoding="async"
                referrerpolicy="no-referrer"/>
        }
    </section>
</div>


@code {
    [Parameter, EditorRequired] public List<string> ImageUrls { get; set; } = [];
    [Parameter] public string? StartingImage { get; set; }
    [Parameter] public EventCallback<string> CurrentImageChanged { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private string? CurrentImage { get; set; }

    protected override void OnParametersSet()
    {
        CurrentImage = StartingImage ?? ImageUrls.First();
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "LeftArrow": await PreviousAsync(); break;
            case "RightArrow": await NextAsync(); break;
        }
    }

    private async Task PreviousAsync()
    {
        if (CurrentImage is null)
        {
            throw new InvalidOperationException("Current image was null after parameters being set");
        }

        var idx = ImageUrls.IndexOf(CurrentImage);

        var prev = idx - 1;

        CurrentImage = IsValidIndex(ImageUrls, prev) ? ImageUrls[prev] : ImageUrls.Last();

        await CurrentImageChanged.InvokeAsync(CurrentImage);
    }

    private async Task NextAsync()
    {
        if (CurrentImage is null)
        {
            throw new InvalidOperationException("Current image was null after parameters being set");
        }

        var idx = ImageUrls.IndexOf(CurrentImage);

        var next = idx + 1;

        CurrentImage = IsValidIndex(ImageUrls, next) ? ImageUrls[next] : ImageUrls.First();

        await CurrentImageChanged.InvokeAsync(CurrentImage);
    }

    private bool IsValidIndex<T>(List<T> list, int index) => index >= 0 && index < list.Count;

}

<style>
    .image-viewer {
        display: flex;
        flex-direction: column;
        background: #36537f;    
        justify-items: center;
        height: 90vh;
        width: 90vw;
        overflow: hidden;
    }
    
    .image-display {
        padding: 0.3rem;
        flex: 1 1 0;
        min-height: 0;
    }
    
    img {
        object-fit: contain;
        display: block;
        margin: auto;
        max-height: 100%;
        max-width: 100%;
        height: auto;
        width: auto;
    }

    .toolbar {
        display: flex;
        flex-direction: row;
        gap: 1em;
        align-items: center;
        border-bottom: 1px solid;
    }
    
    .minwidth {
        width: min-content;
    }
</style>
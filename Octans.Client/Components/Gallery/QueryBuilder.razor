@using Octans.Client.Components.Pages
@inject QueryBuilderViewmodel ViewModel
@implements IDisposable

<div class="qb-root">
  <div class="qb-parameters" role="list" aria-label="Active query parameters">
    @if (ViewModel.Parameters.Count == 0)
    {
      <div class="qb-empty">No parameters yet.</div>
    }
    else
    {
      @foreach (var item in ViewModel.Parameters.Select((val, idx) => new
                  {
                    val,
                    idx
                  }))
      {
        var colorClass = item.val.Kind == QueryKind.System ? "qb-param-system" : "qb-param-normal";
        
        <div 
          class="qb-param @colorClass" 
          role="listitem" 
          title="Double-click to remove"
          ondblclick="@(async () => await ViewModel.RemoveAtAsync(item.idx))">
          @item.val.Raw
        </div>
      }
    }
  </div>

  <div class="qb-inputbar">
    <input
      class="qb-input"
      placeholder="Type a parameter and press Enter"
      value="@ViewModel.Current"
      @oninput="@(async e => await ViewModel.OnInputAsync(e.Value?.ToString()))"
      @onkeydown="@(async e => await ViewModel.HandleKeyDownAsync(e.Key))"/>

    <!-- Placeholder buttons -->
    <button class="qb-btn" title="Reserved"><span aria-hidden="true">üìÑ</span></button>
    <button class="qb-btn" title="Reserved"><span aria-hidden="true">‚≠ê</span></button>
    <button class="qb-btn" title="Reserved"><span aria-hidden="true">üîí</span></button>
  </div>

  @if (ViewModel.Suggestions.Count > 0)
  {
    <div class="qb-suggest">
      @foreach (var s in ViewModel.Suggestions)
      {
        <div class="qb-suggest-item" @onclick="@(async () => await ViewModel.ApplySuggestion(s))">
          @s.Namespace : @s.Subtag
        </div>
      }
    </div>
  }
</div>

@code {

  [Parameter, EditorRequired] public EventCallback<List<QueryParameter>> QueryChanged { get; set; }
  [Parameter, EditorRequired] public EventCallback OnCancellationRequested { get; set; }
  [Parameter, EditorRequired] public bool CanCancel { get; set; }
  [Parameter] public IEnumerable<QueryParameter>? Query { get; set; }

  protected override void OnInitialized()
  {
    if (RendererInfo.IsInteractive)
    {
      ViewModel.StateHasChanged += OnStateChanged;
      ViewModel.QueryChanged += OnViewModelOnQueryChanged;
    }
  }

  private async Task OnViewModelOnQueryChanged(List<QueryParameter> list)
  {
    await QueryChanged.InvokeAsync(list);
  }

  private async Task OnStateChanged()
  {
    await InvokeAsync(StateHasChanged);
  }

  protected override async Task OnParametersSetAsync()
  {
    await ViewModel.Initialize(Query);
  }

  public void Dispose()
  {
    if (ViewModel is null)
    {
      return;
    }

    if (RendererInfo.IsInteractive)
    {
      return;
    }

    ViewModel.StateHasChanged -= OnStateChanged;
    ViewModel.QueryChanged -= OnViewModelOnQueryChanged;
    ViewModel.Dispose();
  }

}

@page "/gallery"
@using Octans.Client.Components.Pages
@inject GalleryViewmodel Viewmodel
@implements IAsyncDisposable

<MudPopover Open="@(Viewmodel.CurrentImage is not null)" Fixed="true" Class="image-popover">
    <div class="d-flex flex-column">
        <img src="@Viewmodel.CurrentImage"
             alt="Gallery image"
             loading="lazy"
             decoding="async"
             referrerpolicy="no-referrer"/>
        <MudButton OnClick="@(() => Viewmodel.CurrentImage = null)" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
    </div>
</MudPopover>


<SplitContainer
    UnitOfPaneSize="UnitOfPaneSize.Percent"
    @bind-FirstPaneSize="PaneSize"
    Orientation="SplitterOrientation.Vertical">

    <FirstPane>
        <section class="querying">
            <GallerySidebar/>
        </section>
    </FirstPane>

    <SecondPane>
        <div class="gallery-container">
            @if (Viewmodel.ImageUrls.Any())
            {
                <div class="image-grid">
                    @foreach (var url in Viewmodel.ImageUrls)
                    {
                        <div class="image-card" @ondblclick="@(() => Viewmodel.CurrentImage = url)">
                            <img src="@url"
                                 alt="Gallery image"
                                 loading="lazy"
                                 decoding="async"
                                 referrerpolicy="no-referrer"/>
                        </div>
                    }
                </div>
            }
            else if (!string.IsNullOrWhiteSpace(Viewmodel.LastError))
            {
                <p>@Viewmodel.LastError</p>
            }
            else if (Viewmodel.Searching)
            {
                <!-- TODO: put in a status bar in a layout. -->

                <MudProgressCircular Color="Color.Primary" Value="@Viewmodel.ProgressPercent" Size="Size.Large">
                    <ChildContent>
                        @Viewmodel.ProgressPercent %
                    </ChildContent>
                </MudProgressCircular>
            }
            else
            {
                <p>No images found.</p>
            }
        </div>
    </SecondPane>
</SplitContainer>

@code
{
    public int PaneSize { get; private set; } = 30;

    protected override void OnInitialized()
    {
        if (RendererInfo.IsInteractive)
        {
            Viewmodel.StateChanged += OnViewmodelOnStateChanged;
        }
    }

    private async Task OnViewmodelOnStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (RendererInfo.IsInteractive)
        {
            Viewmodel.StateChanged -= OnViewmodelOnStateChanged;
            await Viewmodel.DisposeAsync();
        }
    }
}

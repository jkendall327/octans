@page "/settings"
@rendermode InteractiveServer
@using Octans.Client.Components.Settings
@inject SettingsViewModel ViewModel

<CascadingValue Value="ViewModel.Context">
    <div class="settings-layout">
        <input class="settings-search" @bind="ViewModel.SearchText" placeholder="Search settings..." />
        <div class="settings-body">
            <SettingsSidebar Pages="ViewModel.Context.Pages" ActivePage="ViewModel.ActivePage" OnSelectPage="SelectPage" />
            <div class="settings-content">
                <CascadingValue Value="ViewModel.ActivePage">
                    <SettingsPage Title="Import">
                        <SettingItem Name="Import Source" Tags=@(new[] { "import" })>
                            <Control>
                                <input @bind="ViewModel.Settings.ImportSource" />
                            </Control>
                        </SettingItem>
                    </SettingsPage>

                    <SettingsPage Title="Tags">
                        <SettingItem Name="Tag Colour" Tags=@(new[] { "colour", "tag" })>
                            <Control>
                                <input type="color" @bind="ViewModel.Settings.TagColor" />
                            </Control>
                        </SettingItem>
                    </SettingsPage>

                    <SettingsPage Title="System">

                        <SettingItem Name="Theme" Tags=@(new[] { "theme", "appearance" })>
                            <Control>
                                <select @bind="ViewModel.Settings.Theme" @bind:after="OnThemeChanged">
                                    <option value="light">Light</option>
                                    <option value="dark">Dark</option>
                                    <option value="sepia">Sepia</option>
                                    <option value="red">Red</option>
                                </select>
                            </Control>
                        </SettingItem>

                        <SettingItem Name="Application Root Directory" Description="The root directory for Octans data storage" Tags=@(new[] { "root", "directory", "storage" })>
                            <Control>
                                <input @bind="ViewModel.Settings.AppRoot" />
                            </Control>
                        </SettingItem>

                        <SettingItem Name="Default Log Level" Description="Controls the verbosity of logs generated by Octans" Tags=@(new[] { "log", "level", "default" })>
                            <Control>
                                <select @bind="ViewModel.Settings.LogLevel">
                                    @foreach (var level in ViewModel.AvailableLogLevels)
                                    {
                                        <option value="@level">@level</option>
                                    }
                                </select>
                            </Control>
                        </SettingItem>

                        <SettingItem Name="ASP.NET Core Log Level" Description="Controls the verbosity of logs generated by ASP.NET Core" Tags=@(new[] { "log", "level", "aspnet" })>
                            <Control>
                                <select @bind="ViewModel.Settings.AspNetCoreLogLevel">
                                    @foreach (var level in ViewModel.AvailableLogLevels)
                                    {
                                        <option value="@level">@level</option>
                                    }
                                </select>
                            </Control>
                        </SettingItem>

                    </SettingsPage>
                  </CascadingValue>
                  @if (ViewModel.SaveSuccess)
                  {
                      <div class="alert alert-success" role="alert">
                          Configuration saved successfully!
                      </div>
                  }
                  @if (ViewModel.SaveError)
                  {
                      <div class="alert alert-danger" role="alert">
                          Error saving configuration: @ViewModel.ErrorMessage
                      </div>
                  }
                  <div class="settings-action">
                      <button class="btn btn-primary" @onclick="SaveConfig" disabled="@ViewModel.IsSaving">
                          @if (ViewModel.IsSaving)
                          {
                              <span>Saving...</span>
                          }
                          else
                          {
                              <span>Save Settings</span>
                          }
                      </button>
                  </div>
                  <p><strong>Note:</strong> Some changes may require a restart of the application to take effect.</p>
              </div>
          </div>

        @if (!string.IsNullOrWhiteSpace(ViewModel.SearchText))
        {
            <ul class="settings-search-results">
                @foreach (var result in ViewModel.Context.Search(ViewModel.SearchText))
                {
                    <li @onclick="@(() => NavigateTo(result))">@result.Name (@result.Page.Title)</li>
                }
            </ul>
        }
    </div>
</CascadingValue>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ViewModel.InitializeAsync();
            if (ViewModel.Context.Pages.Count > 0 && ViewModel.ActivePage is null)
            {
                ViewModel.ActivePage = ViewModel.Context.Pages[0];
            }
            StateHasChanged();
        }
    }

    private void SelectPage(SettingsPageDescriptor page)
    {
        ViewModel.ActivePage = page;
    }

    private async Task NavigateTo(SettingDescriptor descriptor)
    {
        ViewModel.ActivePage = descriptor.Page;
        await descriptor.Focus();
    }

    private async Task SaveConfig()
    {
        await ViewModel.SaveConfiguration();
        StateHasChanged();
    }

    private async Task OnThemeChanged()
    {
        await ViewModel.ThemeChanged();
    }
}

<style>
    .settings-layout {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .settings-search {
        margin-bottom: 1rem;
        padding: 0.5rem;
    }

    .settings-body {
        display: flex;
        flex: 1;
    }

    .settings-content {
        flex: 1;
        padding: 1rem;
    }

    .settings-search-results {
        list-style: none;
        margin: 1rem 0 0 0;
        padding: 0;
    }

    .settings-search-results li {
        cursor: pointer;
        padding: 0.25rem 0;
    }
</style>
